
function argparser()
{
    # Argparser reserved functions or variables.
    # Attributes in this array will not be unset(tear down) after
    # parser_parse() call.
    __reserved_attrs__=(argparser_subargs)

    # Argparser API functions or variables.
    # This is a fake array which is to indicate the argparser api.
    # Attributes in this array will be unset after parser_parse() call.
    # @tear-down
    __api_attrs__=(argparser argparser_add_arg argparser_parse argparser_DEBUG argparser_help \
            argparser_store argparser_reserve_usage)

    # Other functions and variables created by argparser
    # @tear-down
    __other_attr__=(ARGPARSER_NAME UN_DEFINE ___values__ ___shift__num__ ARGPARSER_PA_NO_PARSE \
            ARGPARSER_PA_PARSED ARGPARSER_OA_NO_PARSE ARGPARSER_OA_PARSED Argparser_prog_name \
            Argparser_help Argparser_prefix_chars Argparser_nargs_extending_EOT Argparser_prologue \
            Argparser_usage Argparser_desc Argparser_epilog Argparser_add_help _argparser_usage \
            Argparser_argument_strings Argparser_argument_dest Argparser_argument_check \
            Argparser_argument_action Argparser_argument_default Argparser_argument_const \
            Argparser_argument_nargs Argparser_argument_desc Argparser_argument_metavar \
            Argparser_argument_required Argparser_argument_choices _Argparser_argument_status \

            # functions defined by argparse, this is generated by command line scripts
            __tear_down__ _argparser_error _check_value_narg_matching _choose_dest \
            _choose_longest_argument_string _choose_metavar _choose_shortest_optional_string \
            _cl_arg_amount_need2reserved_now _do_action _final_check_argparser_aguments \
            _format_arg_help _format_option_flag _format_usge _get_argparser_optional_arg_key \
            _get_argparser_positional_arg_key _get_cl_arg_values _get_extending_values \
            _globals_register _is_callback _is_long_option _is_optional_argment \
            _is_positional_argment _parse_long_option _parse_positional_arg _parse_short_option \
            _prepare_argparser_aguments _reset_values_and_shift_num _set_default2dest _set_value2dest \
            _translate _translate_prog_string _trim_option_prefixs _usage argparser_DEBUG \
            argparser_add_arg argparser_check argparser_help argparser_parse argparser_reserve_usage \
            argparser_store)


    ARGPARSER_NAME=argparser

    # data structure
    UN_DEFINE=_undef_
    ___values__=$UN_DEFINE
    ___shift__num__=0
    # option_status 
    # 0: Positional Parameter(pp) do not show up in $@, so haven't been parsed
    # 2: pp have been parsed
    # 1: Optional Parameter(op) haven't been parsed
    # 3: op have been parsed
    ARGPARSER_PA_NO_PARSE=0
    ARGPARSER_PA_PARSED=2
    ARGPARSER_OA_NO_PARSE=1
    ARGPARSER_OA_PARSED=3
    # argparser
    Argparser_prog_name=$(basename $0)
    Argparser_help=$UN_DEFINE
    Argparser_prefix_chars='-'
    Argparser_nargs_extending_EOT='-'
    Argparser_prologue=''
    Argparser_usage=$UN_DEFINE
    Argparser_desc=''
    Argparser_epilog=''
    Argparser_add_help=true
    # this is the stored string of usage
    _argparser_usage=$UN_DEFINE

    # option parameters array
    Argparser_argument_strings=()
    Argparser_argument_dest=()
    Argparser_argument_check=()
    Argparser_argument_action=()
    Argparser_argument_default=()
    Argparser_argument_const=()
    Argparser_argument_nargs=()
    Argparser_argument_desc=()
    Argparser_argument_metavar=()
    Argparser_argument_required=()
    Argparser_argument_choices=()
    _Argparser_argument_status=()
    # arguments after `--`
    argparser_subargs=()

    # unset variables and functions after argparser_parse
    function __tear_down__()
    {
        set -- "${__other_attr__[@]}"
        while (($# > 0)); do
            unset "$1"
            shift
        done
        unset argparser
    }

	function _argparser_error()
	{
		local prog=$1
		local message=$2
		local error_type=$(tr [A-Z] [a-z] <<< "${3:-error}")
		local no_exit=$4
		printf "$prog: $error_type: "'%s\n' "$message" >&2
		[[ $no_exit ]] || exit 1
	}

    # Turn on DEBUG model
    # This function implement DEBUG model by overwrite the argparser_parser function
    function argparser_DEBUG()
    {
        _argparser_old_parse_func=$(declare -f argparser_parse)
        [[ $_argparser_old_parse_func = '' ]] && \
            _argparser_error "$ARGPARSER_NAME" "$FUNCNAME: debug model setup fail: argparser_parse function not found." internal

        # get value from variable name
        # - $1: variable name
        function _get_()
        {
            local variable=$1
            local v=$(declare -p "$variable" 2>/dev/null)
            v=${v#*=}
            v=${v#\'}
            v=${v%\'}
            printf "%s" "$v"
        }

        function argparser_parse()
        {
            printf "%s\n%s\n" "$ARGPARSER_NAME debug info:" "----"
            # APP infomation
            printf "|APP level info:\n"
            printf "  %s: '%s'\n" "Program name" "$Argparser_prog_name"
            printf "  %s: '%s'\n" "Prefix chars" "$Argparser_prefix_chars"
            printf "  %s: '%s'\n" "Nargs Extending EOT" "$Argparser_nargs_extending_EOT"
            printf "  %s: '%s'\n" "Help adding" "$Argparser_add_help"
            printf "  %s: '%s'\n" "Help prologue" "$Argparser_prologue"
            printf "  %s: '%s'\n" "Help usage" "$Argparser_usage"
            printf "  %s: '%s'\n" "Help desciption" "$Argparser_desc"
            printf "  %s: '%s'\n" "Help string" "$Argparser_help"
            printf "  %s: '%s'\n" "Help epilog" "$Argparser_epilog"
            # help doc
            printf "\n|APP help doc:\n"
            echo "$(argparser_help)"

            # argument infomation
            printf "\n|Argument level info:\n"
            local ___argparser_k_ ___argparser_arg_string_ ___argparser_dest_ \
                    ___dest_has_value_before_ ___argparser_stored_dest_ \
                    ___argparser_arg_desc_
            # reserve the argparser_argument_* values avoiding unseting by argparser_parse
            local ___argparser_argument_strings_=("${Argparser_argument_strings[@]}")
            local ___argparser_argument_dest_=("${Argparser_argument_dest[@]}")
            local ___argparser_argument_default_=("${Argparser_argument_default[@]}")
            local ___argparser_argument_const_=("${Argparser_argument_const[@]}")
            local ___argparser_argument_nargs_=("${Argparser_argument_nargs[@]}")
            local ___argparser_argument_metavar_=("${Argparser_argument_metavar[@]}")

            # check whether the dest variable has value before
            for ___argparser_k_ in ${!___argparser_argument_strings_[@]}; do
                ___argparser_dest_=$(_choose_dest "${___argparser_argument_dest_[$___argparser_k_]}" \
                                        "${___argparser_argument_strings_[$___argparser_k_]}")
                ___argparser_stored_dest_[$___argparser_k_]=$___argparser_dest_
                if (declare -p "$___argparser_dest_" 2>/dev/null 1>/dev/null); then
                    ___dest_has_value_before_[$___argparser_k_]='!'
                fi
            done

            # call back the old argparser_parse function and unset _argparser_old_parse_func
            eval "$_argparser_old_parse_func"
            argparser_parse "$@"
            unset _argparser_old_parse_func

            # print debug info after argparser_parse
            printf "  %-15s  %-5s  %-10s  %-10s  %-10s  %-13s  %s\n" \
                "argument" "nargs" "default" "const" "dest" "overwriting" "value"
            for ___argparser_k_ in ${!___argparser_argument_strings_[@]}; do
                ___argparser_arg_string_=${___argparser_argument_strings_[$___argparser_k_]}
                ___argparser_arg_string_=${___argparser_arg_string_//'|'/,}

                printf "  %-15s  %5s  %-10s  %-10s  %-10s  %-13s  %s\n" \
                    "$___argparser_arg_string_" \
                    "${___argparser_argument_nargs_[$___argparser_k_]}" \
                    "${___argparser_argument_default_[$___argparser_k_]}" \
                    "${___argparser_argument_const_[$___argparser_k_]}" \
                    '$'"${___argparser_stored_dest_[$___argparser_k_]}" \
                    "${___dest_has_value_before_[$___argparser_k_]}" \
                    "$(_get_ "${___argparser_stored_dest_[$___argparser_k_]}")"
            done

            # subarguments
            printf "\n%s\n" "|Sub arguments: $(_get_ argparser_subargs)"

            unset -f _get_
        }
    }

	function argparser_add_arg()
	{
        # fetch option name
        local _is_positional=false
		local _pattern='^[-_0-9a-zA-Z]+$'
		local argument_string=$1
        shift
        if _is_positional_argment "$argument_string"; then
            [[ $1 != '' && $1 != *=* ]] &&\
                _argparser_error $ARGPARSER_NAME "positional argument name should be supplied just 1: $argument_string $1."
            _is_positional=true
        else
            while (( $# > 0 )); do
                [[ $1 = *=* ]] && break
                _is_positional_argment "$1" && \
                    _argparser_error "$ARGPARSER_NAME" "$FUNCNAME: positional argument shouldn't mix in optional argument."
                [[ ! $1 =~ $_pattern ]] && \
                    _argparser_error "$ARGPARSER_NAME" "$FUNCNAME: argument string should only contain [-_0-9a-zA-Z]: $1."
                argument_string="$argument_string|$1"
                shift
            done
        fi
        Argparser_argument_strings[${#Argparser_argument_strings[@]}]=$argument_string

        # fetch other option data
        local const=$UN_DEFINE
        local default=$UN_DEFINE
        local nargs=$UN_DEFINE
        local metavar=$UN_DEFINE
        local dest=''
        local desc=''
        local action=''
        local choices=''
        local required=false
        local check=argparser_check
        while (($# > 0)); do
            case $1 in
                const=*) const=${1#*=}
                    ;;
                default=*) default=${1#*=}
                    ;;
                nargs=*) nargs=${1#*=}
                    ;;
                metavar=*) metavar=${1#*=}
                    ;;
                dest=*) dest=${1#*=}
                    ;;
                desc=*) desc=${1#*=}
                    ;;
                action=*) action=${1#*=}
                    ;;
                choices=*) choices=${1#*=}
                    ;;
                required=*) required=${1#*=}
                    ;;
                check=*) check=${1#*=}
                    ;;
                *) _argparser_error $ARGPARSER_NAME "$FUNCNAME: unrecognized argument: $1"
                    ;;
            esac
            shift
        done
        # dest must be an valid variable name
        _pattern='^[_a-zA-Z][_0-9a-zA-Z]*$'
        if [[ $dest != '' && ! $dest =~ $_pattern ]]; then
            _argparser_error $FUNCNAME "argument_string: dest must be a valid variable name: $dest."
        fi
        # action must be callable
        if [[ $action != '' ]] && ! _is_callback "$action"; then
            _argparser_error $FUNCNAME "$argument_string: action must be callable: $action."
        fi
        # check must be callable
        if ! _is_callback "$check"; then
            _argparser_error $FUNCNAME "$argument_string: check must be callable: $check."
        fi
        # required: 1.positional argument not support required; 2.only true or false to choose
        if [[ $required = true ]]; then
            [[ $_is_positional = true ]] && \
                _argparser_error $FUNCNAME "positional argument $argument_string do not support required option."
        elif [[ $required = false ]]; then
            : # do nothing
        else
            _argparser_error $FUNCNAME "$argument_string: required only could be true or false."
        fi
        # const: positional argument not support const
        if [[ $const != $UN_DEFINE && $_is_positional = true ]]; then
            _argparser_error $FUNCNAME "positional argument $argument_string do not support const option."
        fi
        # check nargs and set nargs depending on const/default
        # 1. nargs only support number, ?, *, +, remain these 5 types
        if [[ $nargs = $UN_DEFINE ]]; then
            if [[ $_is_positional = true ]]; then
                # define nargs of positional argument
                if [[ $default = $UN_DEFINE ]]; then
                    nargs=1
                else
                    nargs='?'
                fi
            else
                # define nargs of positional argument
                if [[ $const = $UN_DEFINE ]]; then
                    nargs=1
                else
                    nargs='?'
                fi
            fi
        else
            local zero_like_nargs_pattern='^0|\?|\*$'
            local non_zero_nargs_pattern='^[1-9][0-9]*|\+|remain$'
            if [[ $nargs =~ $non_zero_nargs_pattern ]]; then
                # non zero like nargs do not support const for optional and default for positional argument
                if [[ $_is_positional = true ]]; then
                    [[ $default != $UN_DEFINE ]] &&\
                        _argparser_error $FUNCNAME "positional argument $argument_string: when default supplied, nargs must be 0|?|*."
                else
                    [[ $const != $UN_DEFINE ]] &&\
                        _argparser_error $FUNCNAME "optional argument $argument_string: when const supplied, nargs must be 0|?|*."
                fi
            elif [[ $nargs =~ $zero_like_nargs_pattern ]]; then
                : # nothing
            else
                _argparser_error $FUNCNAME "$argument_string: nargs must be in (?|*|+|remain|[number])."
            fi      
        fi

        Argparser_argument_dest[${#Argparser_argument_dest[@]}]=$dest
        Argparser_argument_check[${#Argparser_argument_check[@]}]=$check
        Argparser_argument_action[${#Argparser_argument_action[@]}]=$action
        Argparser_argument_default[${#Argparser_argument_default[@]}]=$default
        Argparser_argument_const[${#Argparser_argument_const[@]}]=$const
        Argparser_argument_nargs[${#Argparser_argument_nargs[@]}]=$nargs
        Argparser_argument_desc[${#Argparser_argument_desc[@]}]=$desc
        Argparser_argument_metavar[${#Argparser_argument_metavar[@]}]=$metavar
        Argparser_argument_required[${#Argparser_argument_required[@]}]=$required
        Argparser_argument_choices[${#Argparser_argument_choices[@]}]=$choices
	}

    function argparser_parse()
    {
        _prepare_argparser_aguments
        # find hyphen command-line args(sub args)
        # use this type of ugly variable names for escaping local variable for _globals_register
        local ___argparser_i_=0 
        local ___argparser_args_=()
        while (($# > 0)); do
            if [[ $1 = '--' ]]; then
                shift
                break
            fi
            ___argparser_args_[$___argparser_i_]=$1
            shift
            ((___argparser_i_++))
        done
        argparser_subargs=("$@")
        set -- "${___argparser_args_[@]}"
        
        # parsing arguments
        while (($# > 0)); do
            if _is_optional_argment "$1"; then
                if _is_long_option "$1"; then
                    _parse_long_option "$@" && shift $___shift__num__
                else
                    _parse_short_option "$@" && shift $___shift__num__
                fi
            else
                _parse_positional_arg "$@" && shift $___shift__num__
            fi
        done

        # final check unparsed args and dump all the dest
        _final_check_argparser_aguments
        _globals_register dump
        __tear_down__
    }

    # reserve argparser usage to avoid functions and variables
    # been unset after argparser_parse.
    function argparser_reserve_usage()
    {
        printf "%s" "$(_usage)"
    }

    # check API
    # fake check, always return true
    # - $1...: values of the argparser argument gotten
    function argparser_check() { :; }

    # action API
    # action_callback dest option_string option_strings - - value
    # store|help|?version?
    # argparser action
    # - $1: dest
    # - $2: command-line argument string
    # - $3: argparser argument string
    # - $4:  reserved
    # - $5:  reserved
    # - $6:  reserved
    # - $7...: values
    function argparser_store()
    {
        local dest=$1
        shift 6
        _globals_register register "$dest" "$@"
    }

    # format help string, print it and exit
    function argparser_help()
    {
        local help=''
        if [[ $Argparser_help = $UN_DEFINE ]]; then
            local prologue=$Argparser_prologue
            local usage=$(_usage)
            local app_desc=$Argparser_desc
            local args_help=$(_format_arg_help)
            local epilog=$Argparser_epilog
            if [[ $prologue != '' ]]; then
                prologue+=$'\n'$'\n'
            fi
            if [[ $usage != '' ]]; then
                usage+=$'\n'
            fi
            if [[ $app_desc != '' ]]; then
                app_desc+=$'\n'
            fi
            if [[ $args_help != '' ]]; then
                args_help=$'\n'$args_help$'\n'
            fi
            if [[ $epilog != '' ]]; then
                epilog=$'\n'$epilog$'\n'
            fi
            help=$prologue$usage$app_desc$args_help$epilog
        else
            help=$Argparser_help
        fi
        printf "%s" "$help"
        exit
    }

    function _is_callback()
    {
        hash "$1" 1>/dev/null 2>&1
    }

    function _is_optional_argment()
    {
        ((${#1} > 1)) && [[ $Argparser_prefix_chars =~ ${1:0:1} ]]
    }

    function _is_positional_argment()
    {
        [[ ! $Argparser_prefix_chars =~ ${1:0:1} ]]
    }

    function _is_long_option()
    {
        local prefix1=${1:0:1}
        local prefix2=${1:1:1}
        ((${#1} > 2)) && \
            [[ $Argparser_prefix_chars =~ $prefix1 ]] &&\
            [[ "$prefix1" = "$prefix2" ]]
    }

    # 1. set all arguments status to NO_PARSE
    function _prepare_argparser_aguments()
    {
        local key argument_strings
        for ((key=0; key < ${#Argparser_argument_strings[@]}; key++)); do
            # set all arguments status to NO_PARSE
            argument_strings=${Argparser_argument_strings[$key]}
            if _is_positional_argment "$argument_strings"; then
                _Argparser_argument_status[$key]=$ARGPARSER_PA_NO_PARSE
            else
                _Argparser_argument_status[$key]=$ARGPARSER_OA_NO_PARSE
            fi
        done
    }

    function _final_check_argparser_aguments()
    {
        local key status default is_required nargs argument_strings
        for ((key=0; key < ${#_Argparser_argument_status[@]}; key++)); do
            status=${_Argparser_argument_status[$key]}
            is_required=${Argparser_argument_required[$key]}
            default=${Argparser_argument_default[$key]}
            argument_strings=${Argparser_argument_strings[$key]}
            if [[ $status = $ARGPARSER_OA_NO_PARSE ]]; then # optional argument
                if [[ $is_required = false ]]; then
                    _set_default2dest "$key" "$ARGPARSER_OA_PARSED"
                else
                    local short_option=$(_choose_shortest_optional_string "$argument_strings")
                    _argparser_error "$Argparser_prog_name" "argument $short_option is required."
                fi
            elif [[ $status = $ARGPARSER_PA_NO_PARSE ]]; then
                nargs=${Argparser_argument_nargs[$key]}
                if [[ $nargs = ['?*'] ]]; then
                    _set_default2dest "$key" "$ARGPARSER_PA_PARSED"
                elif [[ $nargs = remain ]]; then
                    : # do nothing
                else
                    local metavar=$(_choose_metavar \
                                    "${Argparser_argument_metavar[$key]}" \
                                    "${Argparser_argument_dest[$key]}" \
                                    "$argument_strings")
                    _usage
                    _argparser_error "$Argparser_prog_name" "argument $metavar is missing."
                fi
            fi
        done
    }

    # parse the first long optional arguments
    # echo shift_num
    # used by argparser_parse
    function _parse_long_option()
    {
        _reset_values_and_shift_num
        local shift_num=0
        local option_string=$1
        shift
        ((shift_num++))

        local sticking_value=$UN_DEFINE
        if [[ $option_string = *=* ]]; then
            sticking_value=${option_string#*=}
            option_string=${option_string%%=*}
        fi
        local key=$(_get_argparser_optional_arg_key "$option_string" $ARGPARSER_OA_NO_PARSE)
        if [[ $key = '' ]]; then
            _argparser_error $Argparser_prog_name "unrecognized argument: $option_string"
        fi
        local nargs="${Argparser_argument_nargs[$key]}"
        if [[ $sticking_value = $UN_DEFINE ]]; then
            _get_cl_arg_values "$nargs" "$@"
            ((shift_num+=$___shift__num__))
        else
            if [[ $nargs = 0 ]]; then
                _argparser_error $Argparser_prog_name "argument $option_string not need values: $option_string=$sticking_value"
            fi
            _get_cl_arg_values "$nargs" "$sticking_value" "$@"
            (( shift_num+=($___shift__num__ - 1) ))
        fi
        # set the values to $@
        set -- "${___values__[@]}"
        # whether values count matches nargs
        _set_value2dest $key "$option_string" "$@"
        ___shift__num__=$shift_num
    }

    # parse the first short optional arguments
    # echo shift_num
    # used by argparser_parse
    function _parse_short_option()
    {
        _reset_values_and_shift_num
        local shift_num=0
        local command_line_1st_arg=$1
        shift
        ((shift_num++))
        local sticking_value=$UN_DEFINE

        # parse short option like -abcValue
        local key nargs arg_string dest _option_string _arg_residues
        while ((${#command_line_1st_arg} > 2)); do
            _option_string=${command_line_1st_arg:0:2}
            _arg_residues=${command_line_1st_arg:2}
            key=$(_get_argparser_optional_arg_key "$_option_string" $ARGPARSER_OA_NO_PARSE)
            if [[ $key = '' ]]; then
                _argparser_error $Argparser_prog_name "unrecognized argument: $_option_string"
            fi
            nargs=${Argparser_argument_nargs[$key]}
            if [[ $nargs = 0 ]]; then
                _set_value2dest $key "$_option_string"
                # rebuilt command_line_1st_arg
                command_line_1st_arg='-'$_arg_residues
            else
                command_line_1st_arg=$_option_string
                sticking_value=$_arg_residues
                break
            fi
        done

        # parsing starts
        local option_string=$command_line_1st_arg
        key=$(_get_argparser_optional_arg_key "$option_string" $ARGPARSER_OA_NO_PARSE)
        if [[ $key = '' ]]; then
            _argparser_error $Argparser_prog_name "unrecognized argument: $option_string"
        fi
        nargs=${Argparser_argument_nargs[$key]}
        if [[ $sticking_value = $UN_DEFINE ]]; then
                _get_cl_arg_values "$nargs" "$@"
                ((shift_num+=$___shift__num__))
        else
            if [[ $nargs = 0 ]]; then
                _argparser_error $Argparser_prog_name "$option_string not need values: $option_string=$sticking_value"
            fi
            _get_cl_arg_values "$nargs" "$sticking_value" "$@"
            (( shift_num+=($___shift__num__ - 1) ))
        fi
        # set the values to $@
        set -- "${___values__[@]}"
        _set_value2dest $key "$option_string" "$@"
        ___shift__num__=$shift_num
    }

    function _parse_positional_arg()
    {
        local shift_num=0
        local key status
        key=$(_get_argparser_positional_arg_key "$ARGPARSER_PA_NO_PARSE")
        if [[ $key = '' ]]; then
            _argparser_error $Argparser_prog_name "unrecognized argument: $1"
        fi
        local nargs=${Argparser_argument_nargs[$key]}
        _get_cl_arg_values "$nargs" "$@"
        (($___shift__num__ == 0)) && \
            _argparser_error $ARGPARSER_NAME "$FUNCNAME: shift number can not be 0." 'internal fatal'
        ((shift_num+=$___shift__num__))
        set -- "${___values__[@]}"
        _set_value2dest $key - "$@"
        ___shift__num__=$shift_num
    }

    # - $1: nargs
    # - $2: error identifer: command-line optional string for optional argument; metavar for positional argument
    # - $3...: values
    function _check_value_narg_matching()
    {
        local nargs=$1
        local error_identifer=$2
        local ignore_pattern='^\*|\?|remain$'
        shift 2
        local pattern='^[1-9][0-9]*|0$'
        if [[ $nargs =~ $pattern ]]; then
            if (($# < $nargs)); then
                _usage
                _argparser_error $Argparser_prog_name "argument $error_identifer: expected $nargs arguments, but $# you supplied: $1... ."
            elif (($# > $nargs)); then
                _argparser_error $ARGPARSER_NAME "$FUNCNAME: argument $error_identifer nargs $nargs < $# value amount." internal
            fi
        elif [[ $nargs = '+' ]]; then # only used for optional argument
            if (($# < 1)); then
                _usage
                _argparser_error $Argparser_prog_name "argument $error_identifer expected at least 1 argument."
            fi
        elif [[ $nargs =~ $ignore_pattern ]]; then
            : # do nothing
        else
            _argparser_error $ARGPARSER_NAME "$FUNCNAME: argument $error_identifer: invalid nargs: $nargs." internal
        fi
    }

    # - $1: key
    # - $2: -(positional)|command-line arg option string(optional)
    # - $?...: values
    function _set_value2dest()
    {
        local key=$1
        local error_identifer=$2
        shift 2
        local nargs=${Argparser_argument_nargs[$key]}
        local is_positional=false
        local parsed_status=$ARGPARSER_OA_PARSED
        if [[ $error_identifer = '-' ]]; then
            is_positional=true
            parsed_status=$ARGPARSER_PA_PARSED
            error_identifer=$(_choose_metavar \
                                "${Argparser_argument_metavar[$key]}" \
                                "${Argparser_argument_dest[$key]}" \
                                "${Argparser_argument_strings[$key]}")
        fi
        _check_value_narg_matching "$nargs" "$error_identifer" "$@"
        if (($# == 0)); then
            if [[ $is_positional = false ]]; then
                if [[ $nargs = remain ]]; then
                    _do_action set "$key" "$error_identifer"
                    _Argparser_argument_status[$key]=$parsed_status
                    return 0
                fi
                local const=${Argparser_argument_const[$key]}
                if [[ $const = $UN_DEFINE ]]; then
                    _do_action no_set "$key" "$error_identifer"
                else
                    _do_action set "$key" "$error_identifer" "$const"
                fi
            else
                _argparser_error $ARGPARSER_NAME "$FUNCNAME: positional argument $error_identifer: value couldn't be empty." internal
            fi
        else
            local v
            # is in choices?
            local choices="${Argparser_argument_choices[$key]}"
            if [[ $choices != '' ]]; then
                local pattern='^('$choices')$'
                for v in "$@"; do
                    [[ $v =~ $pattern ]] || \
                        _argparser_error $Argparser_prog_name "argument $error_identifer: $v not in [$choices]"
                done
            fi
            # check values
            local check="${Argparser_argument_check[$key]}"
            $check "$@"
            _do_action set "$key" "$error_identifer" "$@"
        fi
        # argument have been parsed
        _Argparser_argument_status[$key]=$parsed_status
    }

    # - $1: key
    # - $2: parsed status you want to change
    function _set_default2dest()
    {
        local key=$1
        local parsed_status=$2
        local dest=$(_choose_dest "${Argparser_argument_dest[$key]}" "${Argparser_argument_strings[$key]}")
        local default=${Argparser_argument_default[$key]}
        if [[ $default != $UN_DEFINE ]]; then
            _globals_register register "$dest" "$default"
        fi
        _Argparser_argument_status[$key]=$parsed_status
    }

    # get the command-line-arg matching argparser optional argument index(key)
    # - $1: command line optional string
    # - $2...: status from _Argparser_argument_status
    function _get_argparser_optional_arg_key()
    {
        local cl_arg=$1
        shift
        local status=$*
        if [[ $status = '' ]]; then
            status=$ARGPARSER_OA_PARSED$ARGPARSER_OA_NO_PARSE
        fi
        local key _option_pattern
        for ((key=0; key < ${#_Argparser_argument_status[@]}; key++)); do
            if [[ ${_Argparser_argument_status[$key]} = [$status] ]]; then
                _option_pattern='^('${Argparser_argument_strings[$key]}')$'
                if [[ $cl_arg =~ $_option_pattern ]]; then
                    echo $key
                    return
                fi
            fi
        done
    }

    # get the first argparser positional argument index
    # - $1...: status from _Argparser_argument_status
    function _get_argparser_positional_arg_key()
    {
        local status=$*
        if [[ $status = '' ]]; then
            status=$ARGPARSER_PA_PARSED$ARGPARSER_PA_NO_PARSE
        fi
        for ((key=0; key < ${#_Argparser_argument_status[@]}; key++)); do
            if [[ ${_Argparser_argument_status[$key]} = [$status] ]]; then
                echo $key
                return
            fi
        done
    }

    # get values from command line arguments by nargs
    # - $1: nargs
    # - $2...: command line args
    # set to ___values__
    function _get_cl_arg_values()
    {
        _reset_values_and_shift_num
        local values=()
        local shift_num=0
        local nargs=$1
        shift
        if [[ $nargs = '?' ]]; then
            if _is_positional_argment "$1"; then
                values=("$1")
                shift_num=1
            fi
        elif [[ $nargs = ['*+'] ]]; then
            _get_extending_values "$@" &&\
            values=("${___values__[@]}")
            shift_num=$___shift__num__
        elif [[ $nargs = 'remain' ]]; then
            values=("$@")
            shift_num=$#
        elif [[ $nargs > 0 ]]; then
            local value_len=0
            while (($# > 0)); do
                if _is_positional_argment "$1"; then
                    values=("${values[@]}" "$1")
                    value_len=${#values[@]}
                    if [[ $value_len == $nargs ]]; then
                        break
                    fi
                    shift
                else
                    break
                fi
            done
            shift_num=$value_len
        elif [[ $nargs = 0 ]]; then
            : # do nothing
        else
            _argparser_error $ARGPARSER_NAME "$FUNCNAME: invalid nargs: $nargs." internal
        fi
        ___values__=("${values[@]}")
        ___shift__num__=$shift_num
    }

    function _reset_values_and_shift_num()
    {
        ___values__=$UN_DEFINE
        ___shift__num__=0
    }

    # get values for the nargs=*|+ arguments
    # - $1...: command-line args
    function _get_extending_values()
    {
        _reset_values_and_shift_num
        # scaning
        local has_extending_EOT=false
        local are_all_args_positional=true
        local shift_num=0
        local values=()
        # check if has_extending_EOT and are_all_args_positional
        while (($# > 0)); do
            if [[ $1 = $Argparser_nargs_extending_EOT ]]; then
                has_extending_EOT=true
                break
            elif _is_optional_argment "$1"; then
                are_all_args_positional=false
                break
            else
                values[${#values[@]}]=$1
                shift
            fi
        done
        # get values
        if [[ $has_extending_EOT = false && $are_all_args_positional = true ]]; then
            local reserved_num=$(_cl_arg_amount_need2reserved_now)
            local value_len=${#values[@]}
            if (($value_len > $reserved_num > 0)); then
                values=("${values[@]:0:$(($value_len - $reserved_num))}")
            fi
        fi
        shift_num=${#values[@]}
        if [[ $has_extending_EOT = true ]]; then
            ((shift_num++))
        fi
        ___shift__num__=$shift_num
        ___values__=("${values[@]}")
    }

    # calculate how much argparser argument nargs(only number type nargs) needing to reserved
    function _cl_arg_amount_need2reserved_now()
    {
        local key nargs status
        local reserved_num=0
        local _pattern='^[0-9]+$'
        for ((key=0; key < ${#_Argparser_argument_status[@]}; key++)); do
            status=${_Argparser_argument_status[$key]}
            nargs=${Argparser_argument_nargs[$key]}
            if [[ $status = $ARGPARSER_PA_NO_PARSE ]] &&\
                    [[ $nargs =~ $_pattern ]]; then
                    ((reserved_num+=$nargs))
            fi
        done
        echo $reserved_num
    }

    function _format_arg_help()
    {
        local arg_flag key arg_desc arg_strings metavar dest _is_required
        for key in ${!Argparser_argument_strings[@]}; do
            arg_strings=${Argparser_argument_strings[$key]}
            dest=${Argparser_argument_dest[$key]}
            metavar=${Argparser_argument_metavar[$key]}
            nargs=${Argparser_argument_nargs[$key]}
            dest=$(_choose_dest "$dest" "$arg_strings")
            metavar=$(_choose_metavar "$metavar" "$dest" "$arg_strings")
            arg_flag=$(_format_option_flag "$arg_strings" "$nargs" "$metavar")
            if [[ ${Argparser_argument_required[$key]} != false ]]; then
                _is_required='not required'
            else
                _is_required='required'
            fi
            # translate some user word
            arg_desc=$(_translate "${Argparser_argument_desc[$key]}" \
                        prog "$Argparser_prog_name" \
                        default "${Argparser_argument_default[$key]}" \
                        choices "${Argparser_argument_choices[$key]}" \
                        const "${Argparser_argument_const[$key]}" \
                        dest "$dest" \
                        metavar "$metavar" \
                        nargs "$nargs" \
                        required "$_is_required")
            printf "%-30s    %-53s\n" "$arg_flag" "$arg_desc"
        done
    }

    # - $1: option_string
    # - $2: nargs
    # - $3: metavar
    function _format_option_flag()
    {
        local LEFT_FLAG='  ' # left 2 space in the flags left side.
        local option_string=${1//'|'/ }
        local nargs=$2
        local metavar=$3

        set -- $option_string
        local last_one_option_str=${@:$#:1}
        local option_flag
        # add detail flag to the last one arg_string
        if _is_positional_argment "$last_one_option_str"; then
            echo "$LEFT_FLAG$metavar"
            return
        else
            local pattern='^[1-9][0-9]*$'
            local _metavar_string
            if [[ $nargs =~ $pattern ]]; then
                if (($nargs > 1)); then
                    _metavar_string="=$metavar ..."
                else
                    _metavar_string="=$metavar"
                fi
            else
                case $nargs in
                    '?') _metavar_string="=[$metavar]"
                        ;;
                    '*') _metavar_string="=[$metavar ...]"
                        ;;
                    '+') _metavar_string="=$metavar [...]"
                        ;;
                    'remain') _metavar_string="=..."
                        ;;
                    '0') _metavar_string="="
                        ;;
                esac
            fi
            # concat option string and _metavar_string
            if _is_long_option "$last_one_option_str"; then
                [[ $_metavar_string = '=' ]] && _metavar_string=''
                option_flag="$last_one_option_str$_metavar_string"
            else
                option_flag="$last_one_option_str ${_metavar_string#=}"
            fi
        fi

        # pop the last option string and join the left option string
        set -- "${@:1:$(($# - 1))}"
        local _opts=''
        while (($# > 0)); do
            _opts+="$1, "
            shift
        done
        echo "$LEFT_FLAG$_opts$option_flag"
    }

    function _usage()
    {
        if [[ $_argparser_usage = $UN_DEFINE ]]; then
            _argparser_usage=$(_format_usge)
        fi
        printf '%s\n' "$_argparser_usage"
    }

    function _format_usge()
    {
        local usage
        if [[ $Argparser_usage != $UN_DEFINE ]]; then
            usage="usage: "$(_translate_prog_string "$Argparser_usage")
            return
        fi
        usage="usage: $Argparser_prog_name"
        local _metavar_string one_arg_usage option_string
        local pattern='^[1-9][0-9]*$'
        local key nargs arg_strings metavar
        for key in ${!Argparser_argument_strings[@]}; do
            nargs=${Argparser_argument_nargs[$key]}
            arg_strings=${Argparser_argument_strings[$key]}
            metavar=$(_choose_metavar \
                        "${Argparser_argument_metavar[$key]}" \
                        "${Argparser_argument_dest[$key]}" \
                        "$arg_strings")
            if [[ $nargs =~ $pattern ]]; then
                printf -v _metavar_string "$metavar %.0s" $(seq $nargs)
                _metavar_string=${_metavar_string% }
            else
                case $nargs in
                    '?') _metavar_string="[$metavar]"
                        ;;
                    '*') _metavar_string="[$metavar ...]"
                        ;;
                    '+') _metavar_string="$metavar [$metavar ...]"
                        ;;
                    'remain') _metavar_string="..."
                        ;;
                    '0') _metavar_string=""
                        ;;
                esac
            fi
            if _is_optional_argment "$arg_strings"; then
                local option_string=$(_choose_shortest_optional_string "$arg_strings")
                one_arg_usage="$option_string $_metavar_string"
                one_arg_usage=${one_arg_usage% }
                if [[ $Argparser_argument_required[$key] != true ]]; then
                    one_arg_usage="[$one_arg_usage]"
                fi
            else
                one_arg_usage=$_metavar_string
            fi
            usage+=" $one_arg_usage"
        done
        echo $usage
    }

    function _translate_prog_string()
    {
        local str=$(_translate "$1" prog $Argparser_prog_name)
        printf "%s" "$str"
    }

    # - $1: string
    # - ${2, 4..}: word of `%(word)s`, the word will be translate
    # - ${3, 5..}: translating to string
    function _translate()
    {
        local str=$1
        if [[ $str = '' ]]; then
            printf "%s" ""
            return
        fi
        shift
        local word to
        while (($# > 0)); do
            word="%(${1})s"
            to=$2
            str=${str//$word/$to}
            shift 2
        done
        str=${str//'\s'/'s'}
        printf "%s" "$str"
    }

    function _choose_shortest_optional_string()
    {
        local optional_strings=${1//'|'/ }
        local shortest_one
        set -- ${optional_strings[*]}
        shortest_one=$1
        shift
        while (($# > 0)); do
            if ((${#shortest_one} > ${#1})); then
                shortest_one=$1
            fi
            shift
        done
        printf "%s" "$shortest_one"
    }

    # - $1: set|no_set, whether or not set to dest by argparser_store
    # - $2: key
    # - $3: command-line argument string
    function _do_action()
    {
        local to_set=$1
        local key=$2
        local cl_arg_string=$3
        shift 3
        local action=${Argparser_argument_action[$key]}
        local dest=${Argparser_argument_dest[$key]}
        local arg_strings=${Argparser_argument_strings[$key]}
        dest=$(_choose_dest "$dest" "$arg_strings")
        if [[ $action = '' ]]; then
            if [[ $to_set = 'set' ]]; then
                argparser_store "$dest" "$cl_arg_string" "$arg_strings" - - - "$@"
            fi
        else
            $action "$dest" "$cl_arg_string" "$arg_strings" - - - "$@"
        fi
    }

    # - $1: metavar
    # - $2: dest
    # - $3: argparser argument strings
    function _choose_metavar()
    {
        local metavar=$1
        if [[ $metavar = $UN_DEFINE ]]; then
            local dest=$2
            if [[ $dest != '' ]]; then
                metavar=$dest
            else
                local argument_string=$3
                metavar=$(_choose_longest_argument_string "$argument_string")
            fi
        fi
        printf "%s" "$metavar"
    }

    function _choose_longest_argument_string()
    {
        local optional_strings=${1//'|'/ }
        set -- ${optional_strings[*]}
        local longest_one=$(_trim_option_prefixs "$1")
        shift
        local arg_string
        while (($# > 0)); do
            arg_string=$(_trim_option_prefixs "$1")
            if ((${#longest_one} < ${#arg_string})); then
                longest_one=$arg_string
            fi
            shift
        done
        printf "%s" "$longest_one"
    }

    # - $1: dest
    # - $2: argparser argument strings
    function _choose_dest()
    {
        local dest=$1
        if [[ $dest != '' ]]; then
            echo "$dest"
        else
            shift
            local arg_strings=${1//|/ }
            local _pattern='^[_a-zA-Z][_0-9a-zA-Z]*$'
            set -- ${arg_strings[*]}
            dest=''
            while (($# > 0)); do
                _dest=$(_trim_option_prefixs "$1")
                shift
                if ((${#dest} < ${#_dest})) && [[ $_dest =~ $_pattern ]]; then
                    dest=$_dest
                fi
            done
            echo "$dest"
        fi
    }

    function _trim_option_prefixs()
    {
        if _is_optional_argment "$1"; then
            if _is_long_option "$1"; then
                echo "${1:2}"
            else
                echo "${1:1}"
            fi
        else
            echo "$1"
        fi
    }


    # register variable declaring literal into an globals scope
    # - $1: action: register|dump|arbitrary|dry_dump
    # - $2: variable name
    # - $3...: values
    function _globals_register()
    {
        # The global register's globals variable
        ###  __Globals_Register_Variable_Declaring_Literal__  ###
        local action__=$1
        shift
        if [[ $action__ = 'register' || $action__ = 'arbitrary' ]]; then
            local variable_name__=$1
            local pattern__='^[_a-zA-Z][_0-9a-zA-Z]*$'
            if [[ ! $1 =~ $pattern__ ]]; then
                _argparser_error "$ARGPARSER_NAME" "$FUNCNAME $action__: invalid variable name: $1." internal
            fi
            shift
            local v__
            local values__=()
            while (($# > 0)); do
                v__=\'${1//"'"/"'\''"}\'
                values__[${#values__[@]}]=$v__ # push to array
                shift
            done
            # arbitrarily set the value to variable
            if [[ $action__ = 'arbitrary' ]]; then
                eval $variable_name__=\("${values__[@]}"\)
                return 0
            fi
            # register to global literal
            local declaring_literal=$variable_name__=\("${values__[@]}"\)$'\n'
            __Globals_Register_Variable_Declaring_Literal__+=$declaring_literal
        elif [[ $action__ = 'dump' ]]; then
            eval "$__Globals_Register_Variable_Declaring_Literal__"
            unset __Globals_Register_Variable_Declaring_Literal__
        elif [[ $action__ = 'dry_dump' ]]; then
            unset __Globals_Register_Variable_Declaring_Literal__
        else
            _argparser_error "$ARGPARSER_NAME" "$FUNCNAME: invalid action__: $action__." internal
        fi
    }

    # initial argparser
    if (( $# > 0 )); then
        if [[ $1 != *=* ]]; then
            Argparser_prog_name=$1
            shift
        fi
        while (( $# > 0 )); do
            case $1 in
                usage=*) Argparser_usage=${1#*=}
                    ;;
                desc=*) Argparser_desc=${1#*=}
                    ;;
                prefix_chars=*) Argparser_prefix_chars=${1#*=}
                    ;;
                help=*) Argparser_help=${1#*=}
                    ;;
                add_help=*) Argparser_add_help=${1#*=}
                    ;;
                epilog=*) Argparser_epilog=${1#*=}
                    ;;
                prologue=*) Argparser_prologue=${1#*=}
                    ;;
                nargs_extending_EOT=*) Argparser_nargs_extending_EOT=${1#*=}
                    ;;
                *) _argparser_error $ARGPARSER_NAME "unrecognized argument: $1"
                    ;;
            esac
            shift
        done
    fi
    # add help option here
    if [[ $Argparser_add_help = true ]]; then
        argparser_add_arg -h --help desc="show this help message and exit" action=argparser_help nargs=0
    fi
    # -- initial argparser done
}
