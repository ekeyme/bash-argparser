# optparser
OPTPARSER_PROG_NAME=$(basename $0)

function optparser()
{
	OPTPARSER_NAME=optparser

	function _parse_parameters()
	{
		local i
		# fetch optparser_to_option_name_pair name
		local optparser_to_option_name_pair=()
		for i in "$@"; do
			shift
			if [[ $i = -- ]]; then
				break
			fi
			if [[ ! $i =~ '^[_a-zA-Z][_0-9a-zA-Z]*=[_0-9a-zA-Z]*$' ]]; then
				optparser_error $OPTPARSER_NAME "invalid parameter: $i" fatal
			fi
			optparser_to_option_name_pair=("${optparser_to_option_name_pair[@]}" "${i/=/ }")
		done
		# parse start
		for argv in "$@"; do
			for i in "${optparser_to_option_name_pair[@]}"; do
				read to_name opt_name <<< "$i"
				if [[ $argv = $opt_name=* ]]; then
					declare -- $to_name="${argv#*=}"
					declare -p $to_name
				fi
			done
		done
	}

	function optparser_error()
	{
		local prog=$(tr [a-z] [A-Z] <<< "$1")
		local message=$2
		local error_type=$(tr [A-Z] [a-z] <<< "${3:-error}")
		printf "$prog: $error_type: "'%s\n' "$message"
		exit 1
	}

	if (( $# > 0 )); then
		OPTPARSER_PROG_NAME=$1
		shift
		for i in "$@"; do
			case $i in
				description=*)
					;;
			esac
		done
	fi

	function optparser_setdefault()
	{
		echo
	}

	function optparser_addopt()
	{
		echo
	}

	function optparser_parse()
	{
		echo
	}

	function optparser_DEBUG()
	{
		echo
	}

	# check API
	# check_callback arg...

	# stop parsing marker --

}

function _set2globals()
{
    local values
    local i
    local _tmp
    if (( $# < 2 )); then
        printf 'Expect at least 2 argument, but %d you given.' $# >&2
        exit 1
    fi
    if [[ ! $1 =~ '^[_a-zA-Z][_0-9a-zA-Z]*$' ]]; then
        printf 'Invalid variable name: %s\n' "$1" >&2
        exit 1
    fi
    local __variable_name__=$1
    shift
    for i in "$@"; do
        _tmp=$( _escaping "$i" )
        values=("${values[@]}" "$_tmp")
    done
    values=("${values[@]:1}")
    if (( ${#values[@]} == 1 )); then
        eval $__variable_name__=${values[0]}
    else
        eval $__variable_name__=\("${values[@]}"\)
    fi
}

function _escaping()
{
    local str="$1"
    str=${str//'\'/'\\'}
    str=${str//'$'/'\$'}
    str=${str//'`'/'\`'}
    str=${str//'"'/'\"'}
    echo "\"$str\""
}